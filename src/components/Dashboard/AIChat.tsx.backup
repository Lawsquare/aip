import React, { useState, useEffect } from 'react'
import { X, Send, Bot, User, Trash2, Check } from 'lucide-react'
import { callN8nRAGAgent, callN8nRAGAgentLocal, getChatRecords, saveChatRecord, deleteChatMessage, getUserProjects, UserProject } from '../../lib/n8n'
import { Organization, Project } from '@/lib/supabase'
import { useAuth } from '@/contexts/AuthContext'
import { MarkdownRenderer } from '../Common/MarkdownRenderer'

interface AIChatProps {
  onClose: () => void
  organization?: Organization
  currentProject?: Project  // 新增：当前项目参数
  showProjectSelector?: boolean
}

interface ChatMessage {
  id: string
  role: 'user' | 'assistant'
  content: string
  timestamp: Date
}

export function AIChat({ onClose, organization, currentProject, showProjectSelector = true }: AIChatProps) {
  const { user } = useAuth()
  const [messages, setMessages] = useState<ChatMessage[]>([])
  const [input, setInput] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const [selectedProjects, setSelectedProjects] = useState<string[]>([])
  const [selectedOrganizations, setSelectedOrganizations] = useState<string[]>([])
  const [isProjectSelectorExpanded, setIsProjectSelectorExpanded] = useState(false)
  const [isOrganizationSelectorExpanded, setIsOrganizationSelectorExpanded] = useState(false)
  const [isLoadingHistory, setIsLoadingHistory] = useState(true)
  const [showContextPanel, setShowContextPanel] = useState(true) // 新增：侧边上下文面板
  const [userProjects, setUserProjects] = useState<UserProject[]>([])
  const [isLoadingProjects, setIsLoadingProjects] = useState<boolean>(false)

  // 初始化时自动预选当前项目和组织
  useEffect(() => {
    if (currentProject) {
      setSelectedProjects([currentProject.id])
      console.log('🎯 自动预选当前项目:', currentProject.name, currentProject.id)
    }
    
    if (organization) {
      setSelectedOrganizations([organization.id])
      console.log('🏢 自动预选当前组织:', organization.name, organization.id)
    }
  }, [currentProject, organization])

  // 加载用户的全部项目（可结合组织上下文定制，这里按“所有自己的项目”，如有组织上下文则过滤该组织）
  useEffect(() => {
    const load = async () => {
      try {
        setIsLoadingProjects(true)
        const projects = await getUserProjects()
        // 如果存在组织上下文（来自项目详情页或组织页），只显示该组织下的项目
        const filtered = organization?.id
          ? projects.filter(p => p.organization_id === organization.id)
          : projects
        setUserProjects(filtered)
      } catch (err) {
        console.error('加载用户项目失败:', err)
      } finally {
        setIsLoadingProjects(false)
      }
    }
    load()
  }, [user?.id, organization?.id])

  // 获取清空点时间戳
  const getClearTimestamp = (): string | null => {
    return localStorage.getItem('chatClearTimestamp')
  }

  // 设置清空点时间戳
  const setClearTimestamp = (timestamp: string) => {
    localStorage.setItem('chatClearTimestamp', timestamp)
  }

  // 智能删除单个聊天消息
  const handleDeleteMessage = async (messageId: string, message: ChatMessage) => {
    console.log('🗑️ 请求删除消息:', { messageId, role: message.role })

    // 1) 总是先移除前端显示（乐观更新）
    setMessages(prev => prev.filter(m => m.id !== messageId))

    // 2) 判断是否为已持久化记录（形如 user-<uuid> / ai-<uuid>）
    const isPersisted = messageId.includes('-')
    if (!isPersisted) {
      console.log('⚠️ 仅前端删除（未持久化的临时消息）:', messageId)
      return
    }

    // 3) 尝试解析记录ID；解析失败也仅前端删除
    const parts = messageId.split('-')
    const recordId = parts.slice(1).join('-')
    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i
    if (!recordId || !uuidRegex.test(recordId)) {
      console.log('⚠️ 非标准ID，已仅前端删除:', messageId)
      return
    }

    // 4) 后端删除（静默），失败不回滚前端
    try {
      const type: 'user' | 'ai' = message.role === 'assistant' ? 'ai' : 'user'
      await deleteChatMessage(recordId, type)
      console.log('✅ 后端删除成功:', { recordId, type })
    } catch (e) {
      console.warn('⚠️ 后端删除失败（已保持前端已删效果）:', e)
    }
  }

  // 刷新聊天历史
  const refreshChatHistory = async () => {
    try {
      console.log('🔄 刷新聊天历史...')
      const records = await getChatRecords(20)
      
      // 根据当前上下文生成智能欢迎消息
      let welcomeContent = '您好！我是您的AI项目管理助手。我可以帮您回答问题、分析项目进度、分配任务等。'
      
      if (currentProject && organization) {
        welcomeContent = `您好！我是您的AI项目管理助手。当前已为您选择了项目「${currentProject.name}」（${organization.name}组织）。您可以直接询问该项目的相关问题，如进度、任务、文档等。`
      } else if (organization) {
        welcomeContent = `您好！我是您的AI项目管理助手。当前已为您选择了「${organization.name}」组织。您可以询问该组织的相关问题，也可以选择特定项目进行更精准的查询。`
      } else {
        welcomeContent = '您好！我是您的AI项目管理助手。我可以帮您回答问题、分析项目进度、分配任务等。您可以直接开始对话，也可以选择特定项目进行更精准的查询。'
      }
      
      const welcomeMessage: ChatMessage = {
        id: 'welcome',
        role: 'assistant',
        content: welcomeContent,
        timestamp: new Date()
      }
      
      // 获取清空点时间戳
      const clearTimestamp = getClearTimestamp()
      
      if (records.length > 0) {
        let filteredRecords = records
        
        // 如果有清空点，只显示清空点之后的记录
        if (clearTimestamp) {
          const clearTime = new Date(clearTimestamp)
          filteredRecords = records.filter(record => {
            const recordTime = new Date(record.created_at)
            return recordTime > clearTime
          })
        }
        
        if (filteredRecords.length > 0) {
          const historyMessages: ChatMessage[] = []
          
          filteredRecords.reverse().forEach((record) => {
            // 只有当content不为空时才添加用户消息
            if (record.content && record.content.trim() !== '') {
              historyMessages.push({
                id: `user-${record.id}`,
                role: 'user',
                content: record.content,
                timestamp: new Date(record.created_at)
              })
            }
            
            // 只有当ai_content不为空时才添加AI回复
            if (record.ai_content && record.ai_content.trim() !== '') {
              historyMessages.push({
                id: `ai-${record.id}`,
                role: 'assistant',
                content: record.ai_content,
                timestamp: new Date(record.created_at)
              })
            }
          })
          
          setMessages([welcomeMessage, ...historyMessages])
          console.log('✅ 聊天历史刷新完成')
        } else {
          setMessages([welcomeMessage])
        }
      } else {
        setMessages([welcomeMessage])
      }
    } catch (error) {
      console.error('❌ 刷新聊天历史失败:', error)
    }
  }

  // 初始化聊天窗口 - 显示清空点之后的历史记录
  useEffect(() => {
    const initializeChat = async () => {
      try {
        console.log('🔍 初始化聊天窗口...')
        const records = await getChatRecords(20)
        
        const welcomeMessage: ChatMessage = {
          id: 'welcome',
          role: 'assistant',
          content: '您好！我是您的AI项目管理助手。我可以帮您回答问题、分析项目进度、分配任务等。您可以直接开始对话，也可以选择特定项目进行更精准的查询。',
          timestamp: new Date()
        }
        
        // 获取清空点时间戳
        const clearTimestamp = getClearTimestamp()
        
        if (records.length > 0) {
          let filteredRecords = records
          
          // 如果有清空点，只显示清空点之后的记录
          if (clearTimestamp) {
            const clearTime = new Date(clearTimestamp)
            filteredRecords = records.filter(record => {
              const recordTime = new Date(record.created_at)
              return recordTime > clearTime
            })
            console.log(`🔄 过滤记录: 清空点${clearTimestamp}之后有${filteredRecords.length}条记录`)
          }
          
          if (filteredRecords.length > 0) {
            const historyMessages: ChatMessage[] = []
            
            filteredRecords.reverse().forEach((record) => {
              // 只有当content不为空时才添加用户消息
              if (record.content && record.content.trim() !== '') {
                historyMessages.push({
                  id: `user-${record.id}`,
                  role: 'user',
                  content: record.content,
                  timestamp: new Date(record.created_at)
                })
              }
              
              // 只有当ai_content不为空时才添加AI回复
              if (record.ai_content && record.ai_content.trim() !== '') {
                historyMessages.push({
                  id: `ai-${record.id}`,
                  role: 'assistant',
                  content: record.ai_content,
                  timestamp: new Date(record.created_at)
                })
              }
            })
            
            setMessages([welcomeMessage, ...historyMessages])
            console.log('✅ 历史记录加载完成')
          } else {
            setMessages([welcomeMessage])
            console.log('✅ 清空点之后无新记录，显示欢迎消息')
          }
        } else {
          setMessages([welcomeMessage])
          console.log('✅ 无历史记录，显示欢迎消息')
        }
      } catch (error) {
        console.error('❌ 初始化失败:', error)
        setMessages([{
          id: 'welcome',
          role: 'assistant',
          content: '您好！我是您的AI项目管理助手。我可以帮您分析项目进度、分配任务、回答问题。请选择要查询的项目，然后输入您的问题。',
          timestamp: new Date()
        }])
      } finally {
        setIsLoadingHistory(false)
      }
    }

    initializeChat()
  }, [])

  // 清空聊天记录（设置清空点）
  const handleClearSession = () => {
    const currentTime = new Date().toISOString()
    setClearTimestamp(currentTime)
    
    const welcomeMessage: ChatMessage = {
      id: 'welcome',
      role: 'assistant',
      content: '您好！我是您的AI项目管理助手。这是一个全新的对话会话。请选择要查询的项目，然后输入您的问题。',
      timestamp: new Date()
    }
    setMessages([welcomeMessage])
    console.log('✅ 清空点已设置:', currentTime)
  }

  const handleSend = async () => {
    if (!input.trim()) return
    
    // 允许在没有选择项目的情况下也能聊天
    // 只有在既没有选择项目也没有组织上下文时才提示
    // if (selectedProjects.length === 0 && !organization?.id) {
    //   alert('请先选择至少一个项目或确保在组织页面中')
    //   return
    // }

    const newMessage: ChatMessage = {
      id: Date.now().toString(),
      role: 'user',
      content: input.trim(),
      timestamp: new Date()
    }

    setMessages(prev => [...prev, newMessage])
    setInput('')
    setIsLoading(true)

    try {
      // 根据选择情况决定传递的参数（仅限当前组织）
      let projectId: string | string[] | undefined = undefined
      if (selectedProjects.length > 0) {
        // 过滤掉不属于当前组织的项目（安全兜底）
        const allowed = organization?.id
          ? selectedProjects.filter(id => userProjects.find(p => p.id === id && p.organization_id === organization.id))
          : selectedProjects
        if (allowed.length > 0) {
          projectId = allowed.length === 1 ? allowed[0] : allowed
        }
      }

      // 组织ID：强制使用当前组织上下文，禁止跨组织
      const organizationId = organization?.id || ''

      const result = await callN8nRAGAgentLocal(
        input.trim(), 
        projectId, 
        organizationId
      )

      // 清理AI回复中的转义字符
      let aiResponseContent = result.success ? result.response || '收到回复但内容为空' : `调用失败: ${result.error}`
      
      if (result.success && result.response) {
        aiResponseContent = result.response
          .replace(/\\n\\n/g, '\n\n')  // 将 \n\n 转换为真正的换行
          .replace(/\\n/g, '\n')       // 将 \n 转换为真正的换行
          .replace(/\\t/g, '\t')       // 处理制表符
          .replace(/\\"/g, '"')        // 处理引号
          .replace(/\\\\/g, '\\')      // 处理反斜杠
          .trim()                      // 去除首尾空白
      }
      
      const aiResponse: ChatMessage = {
        id: (Date.now() + 1).toString(),
        role: 'assistant',
        content: aiResponseContent,
        timestamp: new Date()
      }
      
      setMessages(prev => [...prev, aiResponse])

      // 前端不再保存聊天记录到数据库，由n8n工作流处理
      // if (result.success) {
      //   await saveChatRecord(input.trim(), aiResponseContent, projectId)
      // }
    } catch (error) {
      const errorResponse: ChatMessage = {
        id: (Date.now() + 1).toString(),
        role: 'assistant',
        content: `系统错误: ${error instanceof Error ? error.message : '未知错误'}`,
        timestamp: new Date()
      }
      setMessages(prev => [...prev, errorResponse])
    } finally {
      setIsLoading(false)
    }
  }

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault()
      handleSend()
    }
  }

  return (
    <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
      {/* 使用并排布局：左侧聊天窗 + 右侧上下文面板 */}
      <div className="flex items-start gap-4 mx-4 max-w-[1320px] w-full">
        <div className="bg-white rounded-xl shadow-xl w-full max-w-[960px] h-[600px] flex flex-col">
        {/* 头部 */}
        <div className="flex items-center justify-between p-4 border-b border-secondary-200">
          <div className="flex items-center gap-3">
            <div className="p-2 bg-primary-100 rounded-lg">
              <Bot className="h-5 w-5 text-primary-600" />
            </div>
            <div>
              <h3 className="font-medium text-secondary-900">AI项目助手</h3>
              <p className="text-sm text-secondary-500">智能项目管理顾问</p>
            </div>
          </div>
          <div className="flex items-center gap-2">
            <button
              onClick={handleClearSession}
              className="p-2 hover:bg-secondary-100 rounded-lg transition-colors group"
              title="清空聊天记录"
            >
              <Trash2 className="h-4 w-4 text-secondary-500 group-hover:text-red-500" />
            </button>
            <button
              onClick={onClose}
              className="p-2 hover:bg-secondary-100 rounded-lg transition-colors"
            >
              <X className="h-5 w-5 text-secondary-600" />
            </button>
          </div>
        </div>

        {/* 聊天消息区域 */}
        <div className="flex-1 overflow-y-auto p-4 space-y-4">
          {isLoadingHistory ? (
            <div className="flex items-center justify-center py-8">
              <div className="flex items-center gap-2 text-secondary-500">
                <div className="animate-spin rounded-full h-4 w-4 border-2 border-primary-500 border-t-transparent"></div>
                <span>加载中...</span>
              </div>
            </div>
          ) : (
            <>
                {/* 聊天消息列表 */}
              {messages.map((message) => (
            <div
              key={message.id}
              className={`group flex items-start gap-3 ${
                message.role === 'user' ? 'justify-end' : 'justify-start'
              }`}
            >
              {message.role === 'assistant' && (
                <div className="p-2 bg-primary-100 rounded-lg">
                  <Bot className="h-5 w-5 text-primary-600" />
                </div>
              )}
              <div className="flex items-start gap-2">
                <div
                  className={`px-4 py-2 rounded-lg ${
                    message.role === 'user'
                      ? 'bg-primary-600 text-white max-w-xs lg:max-w-md'
                      : 'bg-secondary-100 text-secondary-900 max-w-[85%] w-full'
                  }`}
                >
                  {message.role === 'assistant' ? (
                    <MarkdownRenderer 
                      content={message.content}
                      className="text-sm prose-headings:text-secondary-900 prose-p:text-secondary-900 prose-strong:text-secondary-900"
                    />
                  ) : (
                    <p className="text-sm whitespace-pre-wrap">{message.content}</p>
                  )}
                </div>
                      {/* 删除按钮 */}
                {message.id !== 'welcome' && (
                  <div className="relative">
                    <button
                      onDoubleClick={(e) => {
                        e.preventDefault()
                        e.stopPropagation()
                        handleDeleteMessage(message.id, message)
                      }}
                      onClick={(e) => {
                        e.preventDefault()
                        e.stopPropagation()
                      }}
                      className={`opacity-30 group-hover:opacity-100 transition-opacity p-1 rounded hover:bg-red-100 peer cursor-pointer ${
                        message.role === 'user' ? 'order-first' : ''
                      }`}
                      title="双击删除此消息"
                    >
                      <X className="h-3 w-3 text-red-500 hover:text-red-700" />
                    </button>
                    <div className="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-1 px-2 py-1 bg-gray-800 text-white text-xs rounded whitespace-nowrap opacity-0 peer-hover:opacity-100 transition-opacity duration-0 pointer-events-none z-10">
                      双击删除
                    </div>
                  </div>
                )}
              </div>
              {message.role === 'user' && (
                <div className="p-2 bg-secondary-200 rounded-lg">
                  <User className="h-4 w-4 text-secondary-600" />
                </div>
              )}
            </div>
          ))}
            </>
          )}
          
          {isLoading && (
            <div className="flex items-start gap-3">
              <div className="p-2 bg-primary-100 rounded-lg">
                <Bot className="h-5 w-5 text-primary-600" />
              </div>
              <div className="bg-secondary-100 px-4 py-2 rounded-lg">
                <div className="flex gap-1">
                  <div className="w-2 h-2 bg-secondary-400 rounded-full animate-bounce"></div>
                  <div className="w-2 h-2 bg-secondary-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                  <div className="w-2 h-2 bg-secondary-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                </div>
              </div>
            </div>
          )}
        </div>

        {/* 输入区域 */}
        <div className="p-4 border-t border-secondary-200">
            {/* 当前项目上下文提示 */}
            {currentProject && organization && (
              <div className="mb-3 p-3 bg-primary-50 border border-primary-200 rounded-lg">
                <div className="flex items-center gap-2 text-sm">
                  <div className="w-2 h-2 bg-primary-500 rounded-full"></div>
                  <span className="text-primary-700">
                    <strong>当前上下文：</strong>项目「{currentProject.name}」（{organization.name}）
                </span>
              <button
                    onClick={() => {
                      setSelectedProjects([])
                      setSelectedOrganizations([])
                    }}
                    className="ml-auto text-xs text-primary-600 hover:text-primary-800 underline"
                    title="点击切换到全局模式"
                  >
                    切换模式
              </button>
                </div>
            </div>
          )}
          
          <div className="flex items-end gap-3">
            <div className="flex-1">
              <textarea
                value={input}
                onChange={(e) => setInput(e.target.value)}
                onKeyPress={handleKeyPress}
                placeholder="请输入您的问题..."
                className="input resize-none"
                rows={2}
              />
            </div>
            <button
              onClick={handleSend}
              disabled={!input.trim() || isLoading}
              className="btn-primary p-3 disabled:opacity-50 disabled:cursor-not-allowed"
                title="发送"
            >
                <Send className="h-5 w-5" />
            </button>
            </div>
          </div>
        </div>

        {/* 侧边上下文面板：简约长条项目列表 + 滑块 */}
        {showContextPanel && (
          <div className="bg-white rounded-xl shadow-xl w-[360px] min-w-[360px] h-[600px] p-4 border border-secondary-200 flex flex-col flex-shrink-0">
            <div className="flex items-center justify-between mb-3">
              <h4 className="text-sm font-semibold text-secondary-900">我的项目</h4>
              <label className="inline-flex items-center cursor-pointer select-none text-xs text-secondary-600">
                <input
                  type="checkbox"
                  className="sr-only peer"
                  checked={selectedProjects.length === userProjects.length && userProjects.length > 0}
                  onChange={() => {
                    if (selectedProjects.length === userProjects.length) {
                      setSelectedProjects([])
                    } else {
                      setSelectedProjects(userProjects.map(p => p.id))
                    }
                  }}
                />
                <span className="mr-2">全选</span>
                <span className="w-10 h-5 bg-secondary-200 rounded-full peer-checked:bg-primary-600 relative transition-colors">
                  <span className="absolute left-0 top-0.5 w-4 h-4 bg-white rounded-full shadow transition-all peer-checked:left-6" />
                </span>
              </label>
            </div>

            <div className="flex-1 overflow-y-auto rounded-md border border-secondary-200">
              {isLoadingProjects ? (
                <div className="p-3 text-sm text-secondary-600">加载项目中...</div>
              ) : userProjects.length === 0 ? (
                <div className="p-3 text-sm text-secondary-600">暂无项目</div>
              ) : (
                // 按组织分组
                (() => {
                  const groups = new Map<string, { name?: string; items: typeof userProjects }>()
                  for (const p of userProjects) {
                    const key = p.organization_id || 'unknown'
                    if (!groups.has(key)) groups.set(key, { name: p.organization_name, items: [] as any })
                    groups.get(key)!.items.push(p)
                  }

                  const selectedOrgId = (selectedProjects[0] && userProjects.find(x => x.id === selectedProjects[0])?.organization_id) || undefined

                  return (
                    <div>
                      {Array.from(groups.entries()).map(([orgId, group]) => (
                        <div key={orgId} className="border-b border-secondary-200 last:border-0">
                          <div className="px-3 py-2 text-xs font-semibold text-secondary-500 bg-secondary-50 sticky top-0 z-10">
                            {group.name || '未归属组织'}
                          </div>
                          <ul>
                            {group.items.map(p => {
                              const disabled = selectedOrgId && p.organization_id !== selectedOrgId
                              const checked = selectedProjects.includes(p.id)
                              return (
                                <li
                                  key={p.id}
                                  className={`px-3 py-2 flex items-center gap-2 ${disabled ? 'opacity-50 cursor-not-allowed' : 'hover:bg-secondary-50 cursor-pointer'}`}
                                  onClick={() => {
                                    if (disabled) return
                                    setSelectedProjects(prev => prev.includes(p.id) ? prev.filter(id => id !== p.id) : [...prev, p.id])
                                  }}
                                  title={p.name}
                                >
                                  <span className={`w-4 h-4 rounded border-2 flex items-center justify-center ${checked ? 'bg-primary-600 border-primary-600' : 'border-secondary-300'}`}>
                                    {checked && <Check className="h-3 w-3 text-white" />}
                                  </span>
                                  <span className="text-sm text-secondary-800 truncate">{p.name}</span>
                                </li>
                              )
                            })}
                          </ul>
                        </div>
                      ))}
                    </div>
                  )
                })()
              )}
            </div>

            <div className="mt-3 text-xs text-secondary-600">已选 {selectedProjects.length} / {userProjects.length}</div>
          </div>
        )}
      </div>
    </div>
  )
} 